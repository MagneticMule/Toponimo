package org.toponimo.client.ui;

import java.io.IOException;

import org.apache.http.HttpStatus;
import org.toponimo.client.ApiKeys;
import org.toponimo.client.Constants;
import org.toponimo.client.ToponimoApplication;
import org.toponimo.client.User;
import org.toponimo.client.utils.TwoReturnValues;
import org.toponimo.client.utils.http.HttpUtils;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.graphics.PixelFormat;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import com.facebook.android.DialogError;
import com.facebook.android.Facebook;
import com.facebook.android.Facebook.DialogListener;
import com.facebook.android.FacebookError;
import com.google.gson.Gson;
import org.toponimo.client.R;

public class LoginActivity extends Activity {

	public static final String	TAG			= "LoginActivity";
	
	// Reference to global appliation
	ToponimoApplication			mApplication;

	/*
	 * requires the app key generated by the fb api, see
	 * http://developers.facebook.com/docs/guides/mobile/
	 */
	Facebook					mFacebook	= new Facebook(ApiKeys.FACEBOOK_API_KEY);

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.login);

		mApplication = (ToponimoApplication) this.getApplication();

		// Text boxes for user name and password
		final EditText userNameEditText = (EditText) findViewById(R.id.login_activity_username_et);
		final EditText passwordEditText = (EditText) findViewById(R.id.login_activity_password_et);
		final ImageView logoImageView = (ImageView) findViewById(R.id.login_activity_logo_iv);

		logoImageView.setVisibility(2);
		// Image file used as a button for login via facebook
		// final ImageView facebookLoginButton = (ImageView)
		// findViewById(R.id.login_activity_facebook_img);

		// if the Facebook button is pressed
		/*
		 * facebookLoginButton.setOnClickListener(new View.OnClickListener() {
		 * public void onClick(View v) { facebookLogin(); } });
		 */
		// if the Sign in button is pressed
		final Button loginButton = (Button) findViewById(R.id.login_activity_signin_btn);
		loginButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				String username = userNameEditText.getText().toString();
				String userPassword = passwordEditText.getText().toString();

				if (HttpUtils.isOnline(getApplicationContext())) {
					if (!(userPassword.length() < 4)) {
						(new ValidateUser(username, userPassword)).execute((Object) null);
					} else {
						passwordEditText.setError("Password must be at least 8 characters");
					}
				} else { // if no net connection
					Toast toast = Toast.makeText(LoginActivity.this, R.string.no_connection_message, Toast.LENGTH_LONG);
					toast.show();
				}
			}
		});

	}

	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
	}

	// Handles the facebook login screen.
	public void facebookLogin() {
		if (mFacebook.isSessionValid()) {
			Intent i = new Intent(LoginActivity.this, PlaceListActivity.class);
			startActivity(i);
		} else {

			/**
			 * see:
			 * http://developers.facebook.com/docs/authentication/permissions/
			 * for a full list of permissions
			 */
			mFacebook.authorize(this, new String[] { "user_about_me", "user_website", "publish_stream" },
					new DialogListener() {

						public void onComplete(Bundle values) {

						}

						public void onFacebookError(FacebookError error) {
							System.out.println("Error: " + error.getMessage().toString());
						}

						public void onError(DialogError e) {

						}

						public void onCancel() {
							// return to login screen
						}
					});
		}
	}

	public void startPlaceListActivity(User _user) {
		Toast toast = new Toast(this.getApplicationContext());
		toast.setGravity(Gravity.TOP, 0, 0);
		switch (_user.getStatus()) {
		case 200: // user exists and is validated
			Log.d(TAG, "CASE 200");
			Log.d("User", _user.getFirstName() + " " + _user.getLastName());
			Intent i = new Intent(LoginActivity.this, WordBankActivity.class);
			startActivity(i);
			break;
		case 400: // user does not exist
			Log.d(TAG, "CASE 400");
			toast = Toast.makeText(getApplicationContext(), "No user registered by that name", Toast.LENGTH_LONG);
			toast.show();
			break;
		case 401: // invalid password
			Log.d(TAG, "CASE 401");
			toast = Toast.makeText(getApplicationContext(), "Invalid login details", Toast.LENGTH_LONG);
			toast.show();
			break;
		default:

		}

	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);

		mFacebook.authorizeCallback(requestCode, resultCode, data);
	}

	/*
	 * Enable full colour support (non-Javadoc)
	 * 
	 * @see android.app.Activity#onAttachedToWindow()
	 */
	@Override
	public void onAttachedToWindow() {
		super.onAttachedToWindow();
		Window window = getWindow();
		window.setFormat(PixelFormat.RGBA_8888);
		window.addFlags(WindowManager.LayoutParams.FLAG_DITHER);
	}

	/**
	 * Responsible for sending the username and password to
	 * the server for validation. The server returns a code based on whether the
	 * user exists
	 * 
	 * @author Thomas
	 * 
	 */
	private class ValidateUser extends AsyncTask<Object, Void, User> {

		private String	username	= "";
		private String	password	= "";

		ProgressDialog	dialog;

		public ValidateUser(String _username, String _password) {
			username = _username;
			password = _password;

		}

		@Override
		protected void onPreExecute() {
			dialog = new ProgressDialog(LoginActivity.this);
			dialog.setMessage("Signing in");
			dialog.setIndeterminate(true);
			dialog.setCancelable(false);
			dialog.show();
			super.onPreExecute();
		}

		@Override
		protected User doInBackground(Object... arg0) {
			User user = new User();
			Gson gson = new Gson();
			try {
				TwoReturnValues<Integer, String> authenticateData = HttpUtils.authenticate(ToponimoApplication.getApp()
						.getHttpClient(), username, password, "true", ApiKeys.LOGIN_URL);

				String jsonData = authenticateData.getSecondVal();
				user = gson.fromJson(jsonData, User.class);

				int httpCode = authenticateData.getFirstVal();

				if (httpCode == HttpStatus.SC_OK) {
					mApplication.setUser(user);
					mApplication.saveDetails(user);

				} else {
					String errorMessage = HttpUtils.GetHttpStatusMessage(httpCode);
					Log.d(TAG, "Error, server responded with the code: " + errorMessage);
				}
			} catch (IOException ioe) {

			}

			return user;

		}

		@Override
		protected void onPostExecute(User user) {
			super.onPostExecute(user);
			dialog.dismiss();
			startPlaceListActivity(user);
		}
	}
}
